<?php

/**
 * @file
 * Demonstrates use of the Cron API in Drupal - hook_cron()
 */

function openspace_functions_views_api() {
  return array(
    'api' => 3,
  );
}

function openspace_functions_views_data() {
  $data = array();

  $data['openspace_ajax_data']['table']['group'] = t('Openspace');
  $data['openspace_ajax_data']['table']['join'] = array(
    '#global' => array(),
  );
  $data['openspace_ajax_data']['area'] = array(
    'title' => t('Ajax data'),
    'help' => t('Include hidden table data for cached ajax updating.'),
    'area' => array(
      'handler' => 'openspace_functions_handler_area_ajax_data',
      'path' => drupal_get_path('module', 'openspace_functions'),
    ),
  );

  $data['openspace_timer']['table']['group'] = t('Openspace');
  $data['openspace_timer']['table']['join'] = array(
    '#global' => array(),
  );
  $data['openspace_timer']['area'] = array(
    'title' => t('Timer markup (1m)'),
    'help' => t('Creates a timer for 1 minute refreshes.'),
    'area' => array(
      'handler' => 'openspace_functions_handler_area_timer_markup',
      'path' => drupal_get_path('module', 'openspace_functions'),
    ),
  );

  return $data;
}

function openspace_functions_views_plugins() {
  $plugins = array();

  $plugins['access']['openspace_invited'] = array(
    'title' => t('Invited participant'),
    'help' => t('Only access if the user is an invited participant for the event.'),
    'handler' => 'openspace_functions_plugin_access',
    'path' => drupal_get_path('module', 'openspace_functions'),
  );

  $plugins['cache']['openspace_ping_cache'] = array(
    'title' => t('Openspace ping'),
    'help' => t('Openspace-specific caching based on event, question and content type.'),
    'handler' => 'openspace_functions_plugin_cache',
    'uses options' => TRUE,
    'help topic' => '',
    'path' => drupal_get_path('module', 'openspace_functions'),
  );

  return $plugins;
}

function openspace_functions_node_delete($node) {
  $nids = array();
  if ($node->type == 'event') {
    $nids = db_query('SELECT entity_id FROM {field_data_field_event} WHERE field_event_nid = :nid', array(':nid' => $node->nid))->fetchCol();
  } else if ($node->type == 'question') {
    $nids = db_query('SELECT entity_id FROM {field_data_field_question_ref} WHERE field_question_ref_nid = :nid', array(':nid' => $node->nid))->fetchCol();
  }
  if (count($nids) > 0) {
    node_delete_multiple($nids);
    drupal_set_message(format_plural(count($nids), '1 additional node was', '@count additional nodes were').' deleted.');
  }
}

function openspace_functions_weight_to_colour($nid, $weight, $TEXT = FALSE) {
  $hexes = &drupal_static(__FUNCTION__.$weight);
  if (!isset($hexes)) {
    $hexes = array();
    $event = node_load($nid);
    $space_items = field_get_items('node', $event, 'field_max_concurrent_spaces');
    $participants = field_get_items('node', $event, 'field_participants');
    $spaces = $space_items[0]['value'];
    $total = count($participants);
    $total2 = count(views_get_view_result('question_sequence', 'all_questions', $nid));
    if ($total2 > $total) $total = $total2;
    $step = 1.0 / $total;
    $spaces *= 2;
    $loops = 0;
    if ($weight > 0) {
      $loops = floor($weight / $spaces);
    }  
    $total_loops = ceil($total / $spaces);
    $hue = $step * $total_loops * $weight;
    $hue += $step * $loops;
    $hue = (($hue * 1000 + $nid) % 1000) * 0.001;
    $rgb = openspace_functions_hsv_to_rgb(array($hue, 0.9, 0.9));
    $hexes[] = openspace_functions_rgb_to_hex($rgb);
    $hexes[] = openspace_functions_brightness($rgb);
  }
  if ($TEXT) return $hexes[1];
  return $hexes[0];
}

function openspace_functions_rgb_to_hex($rgb) {
  return sprintf('%02X%02X%02X', $rgb[0], $rgb[1], $rgb[2]);
}

function openspace_functions_hsv_to_rgb($hsv) {
  list($H,$S,$V) = $hsv;
  //1
  $H *= 6;
  //2
  $I = floor($H);
  $F = $H - $I;
  //3
  $M = $V * (1 - $S);
  $N = $V * (1 - $S * $F);
  $K = $V * (1 - $S * (1 - $F));
  //4
  $R = $G = $B = 0;
  switch ($I) {
    case 0:
      list($R,$G,$B) = array($V,$K,$M);
      break;
    case 1:
      list($R,$G,$B) = array($N,$V,$M);
      break;
    case 2:
      list($R,$G,$B) = array($M,$V,$K);
      break;
    case 3:
      list($R,$G,$B) = array($M,$N,$V);
      break;
    case 4:
      list($R,$G,$B) = array($K,$M,$V);
      break;
    case 5:
    case 6: //for when $H=1 is given
      list($R,$G,$B) = array($V,$M,$N);
      break;
  }
  return array($R * 255, $G * 255, $B * 255);
}

function openspace_functions_brightness($rgb) {
  $brightness = sqrt(
    $rgb[0] * $rgb[0] * 0.299 +
    $rgb[1] * $rgb[1] * 0.587 +
    $rgb[2] * $rgb[2] * 0.114
  );
  return ($brightness < 130) ? "FFFFFF" : "000000";
}

function openspace_functions_event_status_check($eid, $status, $account = NULL, $log = NULL) {
  global $user;
  if (is_numeric($status)) $status = array($status);
  if ($account == NULL) $account = $user;
  $SAME = in_array(openspace_functions_get_event_status($eid), $status);
  return $SAME; 
}

function openspace_functions_get_event_status($eid) {
  $tid = &drupal_static(__FUNCTION__.$eid);
  if (!isset($tid)) {
    if ($eid == NULL && is_numeric(arg(1))) {
      $eid = arg(1);
    }
    $event = node_load($eid);
    if ($event && $event->type == 'event') { 
      $sids = field_get_items('node', $event, 'field_status');
      $tid = intval($sids[0]['tid']);
    } else {
      $tid = NULL;
    }
  }
  return $tid;
}

function openspace_functions_status_display($tid, $nid, $u = NULL) {
  global $user;
  if (!$u) {
    $u = $user;
  }
  if ($tid == NULL) {
    $tid = openspace_functions_get_event_status($nid);
  }
  $event = null;
  if (in_array($tid, array(11, 12, 24))) {
    $node = node_load($nid);
    $eids = field_get_items('node', $node, 'field_event'); 
    $event = node_load($eids[0]['nid']);
  }
  $items = array();
  $query = array('query'=>array(
    'edit'=>array(
      'field_event'=>array(LANGUAGE_NONE=>$nid), 
    ),
    'destination'=>$_GET['q'],
  ));
  switch ($tid) {
    case '1':
      $items[] = l(t('Invite participants'), 'node/add/user-import', $query);
      if ($u->uid == 1) {
        $items[] = flag_create_link('add_participants', $nid);
        $items[] = flag_create_link('auto_post', $nid);
      }
      $items[] = flag_create_link('event_active', $nid);
      break;
    case '2':
      if ($u->uid == 1) {
        $items[] = flag_create_link('add_questions', $nid);
        $items[] = flag_create_link('auto_post', $nid);
      }
      $items[] = flag_create_link('event_active', $nid);
      $items[] = flag_create_link('discussion_mode', $nid);
      break;
    case '3':
      if ($u->uid == 1) {
        $items[] = flag_create_link('auto_post', $nid);
      }
      $items[] = flag_create_link('discussion_mode', $nid);
      $items[] = flag_create_link('event_concluded', $nid);
      break;
    case '4':
      if ($u->uid == 1) {
        $items[] = flag_create_link('auto_post', $nid);
      }
      $items[] = flag_create_link('event_concluded', $nid);
      break;
    case '11':
      $status = openspace_functions_get_event_status($event->nid);
      if ($status == 1 ) {
        $items[] = '<p>You accepted this invitation. If you wish, you can change your mind and decline the invitation by clicking the button below.</p><p>'.flag_create_link('invitation_status', $nid).'</p>';
      } else if ($status == 2) {
        $link = openspace_functions_question_tweet_link(array('event'=>$event->nid));
        $items[] = '<p>Please submit any questions you wish to host for the event.</p><p>'.$link.'</p>';
      } else if ($status == 3) {
        $items[] = '<p>You are participating in this event.</p>';
      } else {
        $items[] = '<p>You participated in this event.</p>';
      }
      break;
    case '12':
      $status = openspace_functions_get_event_status($event->nid);
      if ($status == 1 ) {
        $items[] = '<p>You declined this invitation. If you wish, you can still accept by clicking the button below.</p><p>'.flag_create_link('invitation_status', $nid).'</p>';
      } else {
        $items[] = '<p>You declined this invitation.</p>';
      }
      break;
    case '24':
      $status = openspace_functions_get_event_status($event->nid);
      if ($status == 1 ) {
        $items[] = '<p>If you wish to accept this invitation, click the button below.</p><p>'.flag_create_link('invitation_status', $nid).'</p>';
      } else {
        $items[] = '<p>You declined this invitation.</p>';
      }
      break;
  }
  $output = '<section class="actions">'.implode(' ', $items).'</section>';
  return $output;
} 

function openspace_functions_render_homepage($user) {
  $output = &drupal_static(__FUNCTION__.$user->uid);
  if (!isset($output)) {
    $output = '';
    $current_user = views_embed_view('invitations', 'my_events', $user->uid);
    $archive_user = views_embed_view('invitations', 'my_archive', $user->uid);
    if (in_array('organiser', $user->roles)) {
      $args = $user->uid;
      if (in_array('superuser', $user->roles)) $args = 'all';
      $current = views_embed_view('active_event_lookup', 'admin_current', $args);
      $archive = views_embed_view('active_event_lookup', 'admin_archive', $args);
      if ($current || $archive) $output .= '<h2>As an event organiser:</h2>';
      if ($current) {
        $output .= '<h3>My current events</h3>';
        $output .= $current;
      }
      if ($archive) {  
        $output .= '<h3>My event archive</h3>';
        $output .= $archive;
      }
      if ($current_user || $archive_user) $output .= '<h2>As a participant:</h2>';
    }
    if ($current_user) {
      $output .= '<h3>Current events</h3>';
      $output .= $current_user;
    }
    if ($archive_user) {
      $output .= '<h3>Archive</h3>';
      $output .= $archive_user;
    }
  }
  return $output;
}

function openspace_functions_get_active_event() {
  global $user;
  $site_event = &drupal_static(__FUNCTION__);
  if (!isset($site_event)) {
    $site_event = FALSE;
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node && $node->type == 'event') {
        $site_event = $node;
      }
    }
    if (!$site_event && $user->uid) {
      $result = views_get_view_result('invitations', NULL, 'all', 'all', $user->uid, 11);
      if (count($result)) {
        $site_event = node_load($result[0]->node_field_data_field_event_nid);
      }
    }
  }
  return $site_event;
}

function openspace_functions_get_site_organiser() {
  global $user;
  $site_organiser = &drupal_static(__FUNCTION__);
  if (!isset($site_organiser)) {
    $site_organiser = FALSE;
    if ($user->uid && in_array('organiser', $user->roles)) {
      $site_organiser = user_load($user->uid);
    } else {
      $event = openspace_functions_get_active_event();
      if ($event) {
        $site_organiser = user_load($event->uid);
      }
    }
  }
  return $site_organiser;
}

function openspace_functions_get_site_logo() {
  $site_logo = &drupal_static(__FUNCTION__);
  if (!isset($site_logo)) {
    $site_logo = FALSE;
    $fids = array();
    $organiser = openspace_functions_get_site_organiser();
    if ($organiser && count($organiser->field_logo)) {
      $fids = field_get_items('user', $organiser, 'field_logo');
      foreach($fids as $fid) {
        $site_logo = image_style_url('logo', $fid['uri']);
      }
    }
  }
  return $site_logo;
}

function openspace_functions_get_site_name() {
  $site_name = &drupal_static(__FUNCTION__);
  if (!isset($site_name)) {
    $site_name = variable_get('site_name', '');
    $organiser = openspace_functions_get_site_organiser();
    if ($organiser) {
      $names = field_get_items('user', $organiser, 'field_site_name');
      if ($names) {
        foreach($names as $name) {
          $value =  field_view_value('user', $organiser, 'field_site_name', $name);
          $site_name = render($value);
        }
      }
    }
  }
  return $site_name;
}

function openspace_functions_get_last_event_timestamp($eid) {
  $timestamp = &drupal_static(__FUNCTION__.$eid);
  if (!isset($timestamp)) {
    $timestamp = 0;
    $result = views_get_view_result('latest_event_content', 'default', $eid, $timestamp);
    if (count($result) > 0) {
      $timestamp = $result[0]->node_changed;
    }
  }
  return $timestamp;
}

function openspace_functions_ping($eid = 'all', $qid = 'all', $type = 'all') {
  $args = array($eid, $qid, $type);
  $NEW = &drupal_static(__FUNCTION__.implode('-', $args));
  if (!isset($NEW)) {
    $NEW = false;
    $cached = views_get_view_result('latest_event_content', 'cached', $eid, $qid, $type);
    $fresh = views_get_view_result('latest_event_content', 'fresh', $eid, $qid, $type);
    if (count($cached) == 0 || count($fresh) == 0) {
      $NEW = true;
    } else {
      if ($cached[0]->node_changed != $fresh[0]->node_changed) {
        $NEW = true;
        views_arg_cache_flush('latest_event_content', 'cached', $args);
        $cached = views_get_view_result('latest_event_content', 'cached', $eid, $qid, $type);
      }
    }
  }
  return $NEW;
}

function openspace_functions_question_tweet_link($variables) {
  $event = $question = null;
  if (isset($variables['post']) || isset($variables['question'])) {
    $prefix = '';
    if (isset($variables['post'])) {
      $post = node_load($variables['post']);
      $qids = field_get_items('node', $post, 'field_question_ref');
      $question = node_load($qids[0]['nid']);
    } else {
      $question = node_load($variables['question']);
      $prefix = '<i class="icon-play expand"></i> ';
    }
    if ($question != null) {
      $htags = field_get_items('node', $question, 'field_hashtag');
      $eids = field_get_items('node', $question, 'field_event');
      $event = node_load($eids[0]['nid']);
      $user = user_load($event->uid);
      $linkText = '';
      $linkText = '<i class="icon-comment twitter"></i>';
      if ($user->uid == $question->uid || in_array('superuser', $user->roles) || $event->uid == $user->uid) {
        $conclude = openspace_functions_create_post_link($event, $question, $user);
        $linkText .= '<i data-url="'.$conclude.'" class="icon-edit conclude"></i>';
      }
      $linkText .= '<span class="hashtag">'.$prefix.'#'.$htags[0]['value'].'</span>';
      $link = openspace_functions_create_post_link($event, $question, $user, $linkText);
      return $link;
    }
  } else {
    $event = node_load($variables['event']);
    $user = user_load($event->uid);
    $link = l('<i class="icon-help"></i> Submit a question', 'node/add/question', array(
      'html' => true,
      'query' => array(
        'destination'=>$_GET['q'],
        'edit'=>array('field_event'=>array(LANGUAGE_NONE=>$event->nid))
      )
    ));
    return $link;
  }
  return '';
}

function openspace_functions_create_post_link($event, $question, $user, $text='') {
  $query = array(
    'edit'=>array(
      'field_event'=>array(LANGUAGE_NONE=>$event->nid), 
      'field_question_ref'=>array(LANGUAGE_NONE=>$question->nid),
    ),
    'destination'=>$_GET['q'],
  );
  if ($text == '') {
    $query['conclusion'] = 1;
  }
  $link = array(
    'href'=>'node/add/post',
    'query' => $query,
    'html'=>TRUE,
    'attributes'=>array(
      'class'=>array('discuss-link'),
    )
  );
  if ($text == '') {
    return url($link['href'], $link);
  }
  return l($text, $link['href'], $link);
}

function openspace_functions_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#bundle'])) {
    if (in_array($form['#bundle'], array('event', 'question', 'post', 'user'))) {
      // Add a cancel button.
      $form['actions']['cancel'] = array(
        '#type'   => 'submit',
        '#value'  => t('Cancel'),
        '#access' => TRUE,
        '#weight' => 15,
        '#submit' => array('openspace_functions_form_cancel', 'node_form_submit_build_node'),
        '#limit_validation_errors' => array(),
      );
    }
  }
}

function openspace_functions_form_cancel($form, &$form_state) {
  $url = $_GET['destination'] ? $_GET['destination'] : 'events';
  drupal_goto($url);
}

function openspace_functions_user_logout_block() {
  global $user; 
  $u = user_load($user->uid); 
  $screen_name = $u->name;
  $log_out = l(t('Log out'), 'user/logout', array('query'=>array('destination'=>'user/login')));
  $username = user_view($u, 'compact_profile');
  return '<p class="logged-in-message">'.t('You are logged in as').' '.drupal_render($username).'. '.t('Not you?').' '.$log_out.'</p>';
}

/**
 * @} End of "defgroup openspace_functions".
 */
